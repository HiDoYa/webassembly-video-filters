
#
#   Initialize os target and features
#

if (is_windows)
{
       target = "wasm-32-wasmrt"

    # target = "x86-64-osx"

    cpu_features = [  ]


    features = [ "cpu"]

    halide_distrib = "//extern/Halide/windows/x64"

}

if (is_mac)
{
    halide_distrib = "//extern/Halide/osx"

    if (is_x64)
    {
        target = "x86-64-osx"
    }

    if (is_arm)
    {
        target = "arm-64-osx"
    }
}

if (is_linux)
{
    halide_distrib = "//extern/Halide/linux"

    target = "x86-64-linux"
}

#
#   Common RunGenMain source
#

source_set ("run_gen")
{
    include_dirs = [ "$halide_distrib/include" ]

    if (is_windows)
    {
        defines = [ "_CRT_SECURE_NO_WARNINGS=1" ]

        include_dirs +=
        [
            "//extern/libpng/include",
            "//extern/libjpeg/include",
        ]
    }

    sources = [ "$halide_distrib/share/Halide/tools/RunGenMain.cpp" ]
}

group ("all")
{
    deps =
    [
        ":scope",
    ]
}

if (is_windows)
{
    #
    #   Copy test_exec deps.
    #

    copy ("copy_test_deps")
    {
        sources =
        [
            "//extern/libpng/lib/win/x64/libpng16.dll",
            "//extern/libpng/lib/win/x64/zlib1.dll",
        ]

        outputs = [ "$root_gen_dir/test/bin/{{source_file_part}}" ]
    }
}

#
#   Template for compiling all generator test variations
#

generator = "$root_gen_dir/bin/generator"

template ("generator_test")
{
    #   forward all variants from the invoker's scope

    forward_variables_from (invoker, "*")

    #   Ensure required properties have been defined

    assert (defined (target), "'target' is not defined in $target_name.")

    assert (defined (feature), "'feature' is not defined in $target_name.")

    if (!defined (generator_name))
    {
        generator_name = target_name
    }

    #

    test_name = target_name

    test_exec = test_name + "_exe"

    test_obj = test_name + "_obj"

    #
    #   Runs the generator test
    #

    action (test_name)
    {
        script = "//build/scripts/run.py"

        deps = [ "//:make_gen_dirs", ":$test_exec" ]

        exe = rebase_path ("$root_gen_dir/test/bin/$target_name")

        command = "$exe --benchmarks=all --benchmark_min_time=1 --parsable_output"

        if (defined (test_args))
        {
            foreach (arg, test_args)
            {
                command += " " + arg
            }
        }

        args = [ command ]

        outputs = [ "$root_gen_dir/.phoney_" + test_name ]
    }

    #
    #   Compiles the static library for the generator.
    #

    action (test_obj)
    {
        deps = [ "//:generator" ]

        script = "//build/scripts/run.py"

        gen_test_obj = rebase_path ("$root_gen_dir/test/obj")

        emit_args = "object,registration"

        params = ""

        if (defined (generator_params) == true)
        {
            foreach (param, generator_params)
            {
                params += param + " "
            }
        }

        output_file = "$root_gen_dir/test/obj/$test_name"

        outputs = [ output_file + ".registration.cpp" ]

        outputs += [ output_file + ".o" ]

        args = [ rebase_path (generator) + " -g $generator_name -e $emit_args -o $gen_test_obj -f $test_name target=$target-$feature $params" ]
    }

    #
    #   Compiles the executable to run the benchmark test
    #

    executable (test_exec)
    {
        output_name = test_name

        output_dir = "$root_gen_dir/test/bin"

        deps = [ "//:make_gen_dirs", ":$test_obj", ":run_gen" ]

        include_dirs = [ "$halide_distrib/include" ]

        sources = get_target_outputs (":$test_obj")

        if (is_windows)
        {
            lib_dirs =
            [
                "$halide_distrib/lib/Release",
                "//extern/libpng/lib/win/x64",
                "//extern/libjpeg/lib/win/x64",
            ]

            libs = [ "Halide.lib", "libpng16.lib", "jpeg-static.lib" ]

            deps += [ ":copy_test_deps" ]
        }

        if (is_mac)
        {
            lib_dirs = [ "$halide_distrib/lib" ]

            libs =
            [
                "$halide_distrib/lib/libHalide.a",
                "pthread",
                "dl",
                "z",
                "curses",
                "png",
                "jpeg",
            ]

            ldflags = [ "-Wl,-stack_size", "-Wl,0x1000000" ]
        }

        if (is_linux)
        {
            lib_dirs = [ "$halide_distrib/lib" ]

            libs =
            [
                "$halide_distrib/lib/libHalide.a",
                "pthread",
                "dl",
                "z",
                "png",
                "jpeg",
            ]
        }
    }
}

#
#   Scope test.
#

generator_test ("scope")
{
    feature = "avx2"

    generator_name = "scope"

    generator_params =
    [
        "input.type=uint8"
    ]

    test_args =
    [
        "input=random:1:[1920,1080,3]",
        "output=" + rebase_path ("//test/output.jpg")
    ]
}
