{"version":3,"file":"flex.d.ts","sources":["flex.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, OnInit } from '@angular/core';\nimport { BaseDirective2, LayoutConfigOptions, StyleUtils, StyleBuilder, StyleDefinition, MediaMarshaller, ElementMatcher } from '@angular/flex-layout/core';\ninterface FlexBuilderParent {\n    direction: string;\n    hasWrap: boolean;\n}\nexport declare class FlexStyleBuilder extends StyleBuilder {\n    protected layoutConfig: LayoutConfigOptions;\n    constructor(layoutConfig: LayoutConfigOptions);\n    buildStyles(input: string, parent: FlexBuilderParent): StyleDefinition;\n}\n/**\n * Directive to control the size of a flex item using flex-basis, flex-grow, and flex-shrink.\n * Corresponds to the css `flex` shorthand property.\n *\n * @see https://css-tricks.com/snippets/css/a-guide-to-flexbox/\n */\nexport declare class FlexDirective extends BaseDirective2 implements OnInit {\n    protected layoutConfig: LayoutConfigOptions;\n    protected marshal: MediaMarshaller;\n    protected DIRECTIVE_KEY: string;\n    protected direction?: string;\n    protected wrap?: boolean;\n    get shrink(): string;\n    set shrink(value: string);\n    get grow(): string;\n    set grow(value: string);\n    protected flexGrow: string;\n    protected flexShrink: string;\n    constructor(elRef: ElementRef, styleUtils: StyleUtils, layoutConfig: LayoutConfigOptions, styleBuilder: FlexStyleBuilder, marshal: MediaMarshaller);\n    ngOnInit(): void;\n    /**\n     * Caches the parent container's 'flex-direction' and updates the element's style.\n     * Used as a handler for layout change events from the parent flex container.\n     */\n    protected onLayoutChange(matcher: ElementMatcher): void;\n    /** Input to this is exclusively the basis input value */\n    protected updateWithValue(value: string): void;\n    /** Trigger a style reflow, usually based on a shrink/grow input event */\n    protected triggerReflow(): void;\n}\nexport declare class DefaultFlexDirective extends FlexDirective {\n    protected inputs: string[];\n}\nexport {};\n"]}