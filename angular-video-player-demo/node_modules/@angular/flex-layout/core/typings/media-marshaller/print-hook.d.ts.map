{"version":3,"file":"print-hook.d.ts","sources":["print-hook.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { OnDestroy } from '@angular/core';\nimport { MediaChange } from '../media-change';\nimport { BreakPoint } from '../breakpoints/break-point';\nimport { LayoutConfigOptions } from '../tokens/library-config';\nimport { BreakPointRegistry, OptionalBreakPoint } from '../breakpoints/break-point-registry';\n/**\n * Interface to apply PrintHook to call anonymous `target.updateStyles()`\n */\nexport interface HookTarget {\n    activatedBreakpoints: BreakPoint[];\n    updateStyles(): void;\n}\nexport declare const BREAKPOINT_PRINT: {\n    alias: string;\n    mediaQuery: string;\n    priority: number;\n};\n/**\n * PrintHook - Use to intercept print MediaQuery activations and force\n *             layouts to render with the specified print alias/breakpoint\n *\n * Used in MediaMarshaller and MediaObserver\n */\nexport declare class PrintHook implements OnDestroy {\n    protected breakpoints: BreakPointRegistry;\n    protected layoutConfig: LayoutConfigOptions;\n    protected _document: any;\n    constructor(breakpoints: BreakPointRegistry, layoutConfig: LayoutConfigOptions, _document: any);\n    /** Add 'print' mediaQuery: to listen for matchMedia activations */\n    withPrintQuery(queries: string[]): string[];\n    /** Is the MediaChange event for any 'print' @media */\n    isPrintEvent(e: MediaChange): Boolean;\n    /** What is the desired mqAlias to use while printing? */\n    get printAlias(): string[];\n    /** Lookup breakpoints associated with print aliases. */\n    get printBreakPoints(): BreakPoint[];\n    /** Lookup breakpoint associated with mediaQuery */\n    getEventBreakpoints({ mediaQuery }: MediaChange): BreakPoint[];\n    /** Update event with printAlias mediaQuery information */\n    updateEvent(event: MediaChange): MediaChange;\n    private registeredBeforeAfterPrintHooks;\n    private isPrintingBeforeAfterEvent;\n    private beforePrintEventListeners;\n    private afterPrintEventListeners;\n    private registerBeforeAfterPrintHooks;\n    /**\n     * Prepare RxJS filter operator with partial application\n     * @return pipeable filter predicate\n     */\n    interceptEvents(target: HookTarget): (event: MediaChange) => void;\n    /** Stop mediaChange event propagation in event streams */\n    blockPropagation(): (event: MediaChange) => boolean;\n    /**\n     * Save current activateBreakpoints (for later restore)\n     * and substitute only the printAlias breakpoint\n     */\n    protected startPrinting(target: HookTarget, bpList: OptionalBreakPoint[]): void;\n    /** For any print de-activations, reset the entire print queue */\n    protected stopPrinting(target: HookTarget): void;\n    /**\n     * To restore pre-Print Activations, we must capture the proper\n     * list of breakpoint activations BEFORE print starts. OnBeforePrint()\n     * is supported; so 'print' mediaQuery activations are used as a fallback\n     * in browsers without `beforeprint` support.\n     *\n     * >  But activated breakpoints are deactivated BEFORE 'print' activation.\n     *\n     * Let's capture all de-activations using the following logic:\n     *\n     *  When not printing:\n     *    - clear cache when activating non-print breakpoint\n     *    - update cache (and sort) when deactivating\n     *\n     *  When printing:\n     *    - sort and save when starting print\n     *    - restore as activatedTargets and clear when stop printing\n     */\n    collectActivations(event: MediaChange): void;\n    /** Teardown logic for the service. */\n    ngOnDestroy(): void;\n    /** Is this service currently in Print-mode ? */\n    private isPrinting;\n    private queue;\n    private deactivations;\n}\n"]}