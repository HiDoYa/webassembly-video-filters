{"version":3,"file":"media-trigger.d.ts","sources":["media-trigger.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { MatchMedia } from '../match-media/match-media';\nimport { BreakPointRegistry } from '../breakpoints/break-point-registry';\nimport { LayoutConfigOptions } from '../tokens/library-config';\n/**\n * Class\n */\nexport declare class MediaTrigger {\n    protected breakpoints: BreakPointRegistry;\n    protected matchMedia: MatchMedia;\n    protected layoutConfig: LayoutConfigOptions;\n    protected _platformId: Object;\n    protected _document: any;\n    constructor(breakpoints: BreakPointRegistry, matchMedia: MatchMedia, layoutConfig: LayoutConfigOptions, _platformId: Object, _document: any);\n    /**\n     * Manually activate range of breakpoints\n     * @param list array of mediaQuery or alias strings\n     */\n    activate(list: string[]): void;\n    /**\n     * Restore original, 'real' breakpoints and emit events\n     * to trigger stream notification\n     */\n    restore(): void;\n    /**\n     * Whenever window resizes, immediately auto-restore original\n     * activations (if we are simulating activations)\n     */\n    private prepareAutoRestore;\n    /**\n     * Notify all matchMedia subscribers of de-activations\n     *\n     * Note: we must force 'matches' updates for\n     *       future matchMedia::activation lookups\n     */\n    private deactivateAll;\n    /**\n     * Cache current activations as sorted, prioritized list of MediaChanges\n     */\n    private saveActivations;\n    /**\n     * Force set manual activations for specified mediaQuery list\n     */\n    private setActivations;\n    /**\n     * For specified mediaQuery list manually simulate activations or deactivations\n     */\n    private simulateMediaChanges;\n    /**\n     * Replace current registry with simulated registry...\n     * Note: this is required since MediaQueryList::matches is 'readOnly'\n     */\n    private forceRegistryMatches;\n    /**\n     * Save current MatchMedia::registry items.\n     */\n    private cacheRegistryMatches;\n    /**\n     * Restore original, 'true' registry\n     */\n    private restoreRegistryMatches;\n    /**\n     * Manually emit a MediaChange event via the MatchMedia to MediaMarshaller and MediaObserver\n     */\n    private emitChangeEvent;\n    private get currentActivations();\n    private hasCachedRegistryMatches;\n    private originalActivations;\n    private originalRegistry;\n    private resizeSubscription;\n}\n"]}