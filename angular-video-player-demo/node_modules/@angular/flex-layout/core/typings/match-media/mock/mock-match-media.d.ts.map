{"version":3,"file":"mock-match-media.d.ts","sources":["mock-match-media.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgZone } from '@angular/core';\nimport { MatchMedia } from '../match-media';\nimport { BreakPointRegistry } from '../../breakpoints/break-point-registry';\n/**\n * MockMatchMedia mocks calls to the Window API matchMedia with a build of a simulated\n * MockMediaQueryListener. Methods are available to simulate an activation of a mediaQuery\n * range and to clearAll mediaQuery listeners.\n */\nexport declare class MockMatchMedia extends MatchMedia {\n    private _breakpoints;\n    autoRegisterQueries: boolean;\n    useOverlaps: boolean;\n    constructor(_zone: NgZone, _platformId: Object, _document: any, _breakpoints: BreakPointRegistry);\n    /** Easy method to clear all listeners for all mediaQueries */\n    clearAll(): void;\n    /** Feature to support manual, simulated activation of a mediaQuery. */\n    activate(mediaQuery: string, useOverlaps?: boolean): boolean;\n    /** Converts an optional mediaQuery alias to a specific, valid mediaQuery */\n    _validateQuery(queryOrAlias: string): string;\n    /**\n     * Manually onMediaChange any overlapping mediaQueries to simulate\n     * similar functionality in the window.matchMedia()\n     */\n    private _activateWithOverlaps;\n    /**\n     *\n     */\n    private _activateByAlias;\n    /**\n     *\n     */\n    private _activateByQuery;\n    /** Deactivate all current MQLs and reset the buffer */\n    private _deactivateAll;\n    /** Insure the mediaQuery is registered with MatchMedia */\n    private _registerMediaQuery;\n    /**\n     * Call window.matchMedia() to build a MediaQueryList; which\n     * supports 0..n listeners for activation/deactivation\n     */\n    protected buildMQL(query: string): MediaQueryList;\n    protected get hasActivated(): boolean;\n}\n/**\n * Special internal class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */\nexport declare class MockMediaQueryList implements MediaQueryList {\n    private _mediaQuery;\n    private _isActive;\n    private _listeners;\n    get matches(): boolean;\n    get media(): string;\n    constructor(_mediaQuery: string);\n    /**\n     * Destroy the current list by deactivating the\n     * listeners and clearing the internal list\n     */\n    destroy(): void;\n    /** Notify all listeners that 'matches === TRUE' */\n    activate(): MockMediaQueryList;\n    /** Notify all listeners that 'matches === false' */\n    deactivate(): MockMediaQueryList;\n    /** Add a listener to our internal list to activate later */\n    addListener(listener: MediaQueryListListener): void;\n    /** Don't need to remove listeners in the testing environment */\n    removeListener(_: MediaQueryListListener | null): void;\n    addEventListener<K extends keyof MediaQueryListEventMap>(_: K, __: (this: MediaQueryList, ev: MediaQueryListEventMap[K]) => any, ___?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof MediaQueryListEventMap>(_: K, __: (this: MediaQueryList, ev: MediaQueryListEventMap[K]) => any, ___?: boolean | EventListenerOptions): void;\n    dispatchEvent(_: Event): boolean;\n    onchange: MediaQueryListListener;\n}\n/**\n * Pre-configured provider for MockMatchMedia\n */\nexport declare const MockMatchMediaProvider: {\n    provide: typeof MatchMedia;\n    useClass: typeof MockMatchMedia;\n};\ndeclare type MediaQueryListListener = ((this: MediaQueryList, ev: MediaQueryListEvent) => any) | null;\nexport {};\n"]}