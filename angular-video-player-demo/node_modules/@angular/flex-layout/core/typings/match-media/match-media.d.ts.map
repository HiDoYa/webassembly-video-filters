{"version":3,"file":"match-media.d.ts","sources":["match-media.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgZone, OnDestroy } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { MediaChange } from '../media-change';\n/**\n * MediaMonitor configures listeners to mediaQuery changes and publishes an Observable facade to\n * convert mediaQuery change callbacks to subscriber notifications. These notifications will be\n * performed within the ng Zone to trigger change detections and component updates.\n *\n * NOTE: both mediaQuery activations and de-activations are announced in notifications\n */\nexport declare class MatchMedia implements OnDestroy {\n    protected _zone: NgZone;\n    protected _platformId: Object;\n    protected _document: any;\n    /** Initialize source with 'all' so all non-responsive APIs trigger style updates */\n    readonly source: BehaviorSubject<MediaChange>;\n    registry: Map<string, MediaQueryList>;\n    private readonly pendingRemoveListenerFns;\n    constructor(_zone: NgZone, _platformId: Object, _document: any);\n    /**\n     * Publish list of all current activations\n     */\n    get activations(): string[];\n    /**\n     * For the specified mediaQuery?\n     */\n    isActive(mediaQuery: string): boolean;\n    /**\n     * External observers can watch for all (or a specific) mql changes.\n     *\n     * If a mediaQuery is not specified, then ALL mediaQuery activations will\n     * be announced.\n     */\n    observe(): Observable<MediaChange>;\n    observe(mediaQueries: string[]): Observable<MediaChange>;\n    observe(mediaQueries: string[], filterOthers: boolean): Observable<MediaChange>;\n    /**\n     * Based on the BreakPointRegistry provider, register internal listeners for each unique\n     * mediaQuery. Each listener emits specific MediaChange data to observers\n     */\n    registerQuery(mediaQuery: string | string[]): MediaChange[];\n    ngOnDestroy(): void;\n    /**\n     * Call window.matchMedia() to build a MediaQueryList; which\n     * supports 0..n listeners for activation/deactivation\n     */\n    protected buildMQL(query: string): MediaQueryList;\n    protected _observable$: Observable<MediaChange>;\n}\n"]}