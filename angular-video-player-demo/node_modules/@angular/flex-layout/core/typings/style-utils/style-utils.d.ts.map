{"version":3,"file":"style-utils.d.ts","sources":["style-utils.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { StylesheetMap } from '../stylesheet-map/stylesheet-map';\nimport { LayoutConfigOptions } from '../tokens/library-config';\nexport declare class StyleUtils {\n    private _serverStylesheet;\n    private _serverModuleLoaded;\n    private _platformId;\n    private layoutConfig;\n    constructor(_serverStylesheet: StylesheetMap, _serverModuleLoaded: boolean, _platformId: Object, layoutConfig: LayoutConfigOptions);\n    /**\n     * Applies styles given via string pair or object map to the directive element\n     */\n    applyStyleToElement(element: HTMLElement, style: StyleDefinition | string, value?: string | number | null): void;\n    /**\n     * Applies styles given via string pair or object map to the directive's element\n     */\n    applyStyleToElements(style: StyleDefinition, elements?: HTMLElement[]): void;\n    /**\n     * Determine the DOM element's Flexbox flow (flex-direction)\n     *\n     * Check inline style first then check computed (stylesheet) style\n     */\n    getFlowDirection(target: HTMLElement): [string, string];\n    hasWrap(target: HTMLElement): boolean;\n    /**\n     * Find the DOM element's raw attribute value (if any)\n     */\n    lookupAttributeValue(element: HTMLElement, attribute: string): string;\n    /**\n     * Find the DOM element's inline style value (if any)\n     */\n    lookupInlineStyle(element: HTMLElement, styleName: string): string;\n    /**\n     * Determine the inline or inherited CSS style\n     * NOTE: platform-server has no implementation for getComputedStyle\n     */\n    lookupStyle(element: HTMLElement, styleName: string, inlineOnly?: boolean): string;\n    /**\n     * Applies the styles to the element. The styles object map may contain an array of values\n     * Each value will be added as element style\n     * Keys are sorted to add prefixed styles (like -webkit-x) first, before the standard ones\n     */\n    private _applyMultiValueStyleToElement;\n    private _setServerStyle;\n    private _getServerStyle;\n    private _readStyleAttribute;\n    private _writeStyleAttribute;\n}\n/**\n * Definition of a css style. Either a property name (e.g. \"flex-basis\") or an object\n * map of property name and value (e.g. {display: 'none', flex-order: 5})\n */\nexport declare type StyleDefinition = {\n    [property: string]: string | number | null;\n};\n"]}