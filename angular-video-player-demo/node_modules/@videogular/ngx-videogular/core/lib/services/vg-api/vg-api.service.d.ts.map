{"version":3,"file":"vg-api.service.d.ts","sources":["vg-api.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { EventEmitter } from '@angular/core';\nimport { VgFullscreenApiService } from '../vg-fullscreen-api/vg-fullscreen-api.service';\nimport { IPlayable } from '../../interfaces/vg-media-api.interface';\nexport declare class VgApiService {\n    medias: {};\n    videogularElement: any;\n    playerReadyEvent: EventEmitter<VgApiService>;\n    isPlayerReady: boolean;\n    fsAPI: VgFullscreenApiService;\n    constructor();\n    onPlayerReady(fsAPI: VgFullscreenApiService): void;\n    getDefaultMedia(): IPlayable;\n    getMasterMedia(): IPlayable;\n    isMasterDefined(): boolean;\n    getMediaById(id?: string): IPlayable;\n    play(): void;\n    pause(): void;\n    get duration(): any;\n    set currentTime(seconds: any);\n    get currentTime(): any;\n    set state(state: any);\n    get state(): any;\n    set volume(volume: any);\n    get volume(): any;\n    set playbackRate(rate: any);\n    get playbackRate(): any;\n    get canPlay(): any;\n    get canPlayThrough(): any;\n    get isMetadataLoaded(): any;\n    get isWaiting(): any;\n    get isCompleted(): any;\n    get isLive(): any;\n    get isMaster(): any;\n    get time(): any;\n    get buffer(): any;\n    get buffered(): any;\n    get subscriptions(): any;\n    get textTracks(): any;\n    seekTime(value: number, byPercent?: boolean): void;\n    $$seek(media: IPlayable, value: number, byPercent?: boolean): void;\n    addTextTrack(type: string, label?: string, language?: string): void;\n    $$addTextTrack(media: IPlayable, type: string, label?: string, language?: string): void;\n    $$getAllProperties(property: string): any;\n    $$setAllProperties(property: string, value: any): void;\n    registerElement(elem: HTMLElement): void;\n    registerMedia(media: IPlayable): void;\n    unregisterMedia(media: IPlayable): void;\n}\n"]}