{"version":3,"file":"i-media-element.interface.js","sourceRoot":"../../../../../libs/ngx-videogular/core/src/","sources":["lib/interfaces/i-media-element.interface.ts"],"names":[],"mappings":";;;;;;;;AAEA,mCAkMC;;;;;;IA9LC,2BAAW;;;;;IAIX,iCAA2B;;;;;IAI3B,6BAAoB;;;;;IAIpB,oCAAqC;;;;;IAIrC,iCAAkB;;;;;IAIlB,iCAA8B;;;;;;IAK9B,iCAAkB;;IAClB,oCAA2B;;;;;IAI3B,mCAA4B;;;;;IAI5B,oCAAoB;;IACpB,qCAAsB;;;;;IAItB,4CAA4B;;;;;;IAK5B,iCAA0B;;;;;IAI1B,8BAAwB;;;;;IAIxB,8BAA2B;;;;;IAI3B,6BAAc;;IACd,kCAAqC;;;;;IAIrC,wCAAwB;;;;;IAIxB,0CAA0B;;IAC1B,8CAAgD;;;;;IAIhD,+BAA6B;;;;;IAI7B,yCAA0B;;;;;;IAK1B,mDAAmC;;;;;IAInC,wCAAyB;;;;;IAIzB,uCAA6B;;;;;IAI7B,mCAAoB;;;;;IAIpB,8BAAe;;;;;IAIf,qCAA8B;;IAC9B,oCAAsE;;IACtE,oCAAwE;;;;;IAIxE,+BAAyB;;;;;;IAKzB,qCAAqB;;;;;IAIrB,+BAA4B;;;;;IAI5B,gCAAgB;;IAChB,mCAAmB;;;;;IAInB,iCAA8B;;;;;IAI9B,gCAA0B;;;;;IAI1B,4BAAY;;IACZ,kCAA8B;;IAC9B,mCAAmC;;IACnC,oCAAqC;;;;;IAIrC,+BAAe;;IACf,0CAAmC;;IACnC,yCAAkC;;IAClC,yCAAkC;;IAClC,sCAA+B;;IAC/B,qCAA8B;;IAC9B,sCAA+B;;IAC/B,qCAA8B;;IAC9B,wCAAiC;;IACjC,0CAAmC;;;;;;;IACnC,4EAAyE;;;;;;IAIzE,0DAAkC;;;;;IAIlC,+CAAa;;;;;IAIb,yDAAuB;;;;IACvB,+DAA4B;;;;;;;;IAI5B,wGAIQ;;;;;IACR,kEAA6C;;;;;;IAI7C,4FAAgE;;;;;;IAKhE,gDAAc;;;;;IAId,+CAAqB;;;;;IACrB,gEAAyD;;;;;;;IACzD,qFAIQ","sourcesContent":["import {AudioTrackList, VideoTrackList} from './deprecated-tracks-types.interface';\n\nexport interface IMediaElement {\n  /**\n   * Returns the id of the element.\n   */\n  id: string;\n  /**\n   * Returns the node name. Only available on native HTML tags.\n   */\n  readonly nodeName?: string;\n  /**\n   * Returns the node element. Only available on Angular classes.\n   */\n  readonly elem?: any;\n  /**\n   * Returns an AudioTrackList object with the audio tracks for a given video element.\n   */\n  readonly audioTracks: AudioTrackList;\n  /**\n   * Gets or sets a value that indicates whether to start playing the media automatically.\n   */\n  autoplay: boolean;\n  /**\n   * Gets a collection of buffered time ranges.\n   */\n  readonly buffered: TimeRanges;\n  /**\n   * Gets or sets a flag that indicates whether the client provides a set of controls for\n   * the media (in case the developer does not include controls for the player).\n   */\n  controls: boolean;\n  crossOrigin: string | null;\n  /**\n   * Gets the address or URL of the current media resource that is selected by IHTMLMediaElement.\n   */\n  readonly currentSrc: string;\n  /**\n   * Gets or sets the current playback position, in seconds.\n   */\n  currentTime: number;\n  defaultMuted: boolean;\n  /**\n   * Gets or sets the default playback rate when the user is not using fast forward or reverse for a video or audio resource.\n   */\n  defaultPlaybackRate: number;\n  /**\n   * Returns the duration in seconds of the current media resource. A NaN value is returned if duration\n   * is not available, or Infinity if the media resource is streaming.\n   */\n  readonly duration: number;\n  /**\n   * Gets information about whether the playback has ended or not.\n   */\n  readonly ended: boolean;\n  /**\n   * Returns an object representing the current error state of the audio or video element.\n   */\n  readonly error: MediaError;\n  /**\n   * Gets or sets a flag to specify whether playback should restart after it completes.\n   */\n  loop: boolean;\n  readonly mediaKeys: MediaKeys | null;\n  /**\n   * Specifies the purpose of the audio or video media, such as background audio or alerts.\n   */\n  msAudioCategory: string;\n  /**\n   * Specifies the output device id that the audio will be sent to.\n   */\n  msAudioDeviceType: string;\n  readonly msGraphicsTrustStatus: MSGraphicsTrust;\n  /**\n   * Gets the MSMediaKeys object, which is used for decrypting media data, that is associated with this media element.\n   */\n  readonly msKeys: MSMediaKeys;\n  /**\n   * Gets or sets whether the DLNA PlayTo device is available.\n   */\n  msPlayToDisabled: boolean;\n  /**\n   * Gets or sets the path to the preferred media source. This enables the Play To target device to\n   * stream the media content, which can be DRM protected, from a different location, such as a cloud media server.\n   */\n  msPlayToPreferredSourceUri: string;\n  /**\n   * Gets or sets the primary DLNA PlayTo device.\n   */\n  msPlayToPrimary: boolean;\n  /**\n   * Gets the source associated with the media element for use by the PlayToManager.\n   */\n  readonly msPlayToSource: any;\n  /**\n   * Specifies whether or not to enable low-latency playback on the media element.\n   */\n  msRealTime: boolean;\n  /**\n   * Gets or sets a flag that indicates whether the audio (either audio or the audio track on video media) is muted.\n   */\n  muted: boolean;\n  /**\n   * Gets the current network activity for the element.\n   */\n  readonly networkState: number;\n  onencrypted: (this: HTMLMediaElement, ev: MediaEncryptedEvent) => any;\n  onmsneedkey: (this: HTMLMediaElement, ev: MSMediaKeyNeededEvent) => any;\n  /**\n   * Gets a flag that specifies whether playback is paused.\n   */\n  readonly paused: boolean;\n  /**\n   * Gets or sets the current rate of speed for the media resource to play. This speed is\n   * expressed as a multiple of the normal speed of the media resource.\n   */\n  playbackRate: number;\n  /**\n   * Gets TimeRanges for the current media resource that has been played.\n   */\n  readonly played: TimeRanges;\n  /**\n   * Gets or sets the current playback position, in seconds.\n   */\n  preload: string;\n  readyState: number;\n  /**\n   * Returns a TimeRanges object that represents the ranges of the current media resource that can be seeked.\n   */\n  readonly seekable: TimeRanges;\n  /**\n   * Gets a flag that indicates whether the the client is currently moving to a new playback position in the media resource.\n   */\n  readonly seeking: boolean;\n  /**\n   * The address or URL of the a media resource that is to be considered.\n   */\n  src: string;\n  srcObject: MediaStream | null;\n  readonly textTracks: TextTrackList;\n  readonly videoTracks: VideoTrackList;\n  /**\n   * Gets or sets the volume level for audio portions of the media element.\n   */\n  volume: number;\n  readonly HAVE_CURRENT_DATA: number;\n  readonly HAVE_ENOUGH_DATA: number;\n  readonly HAVE_FUTURE_DATA: number;\n  readonly HAVE_METADATA: number;\n  readonly HAVE_NOTHING: number;\n  readonly NETWORK_EMPTY: number;\n  readonly NETWORK_IDLE: number;\n  readonly NETWORK_LOADING: number;\n  readonly NETWORK_NO_SOURCE: number;\n  addTextTrack(kind: string, label?: string, language?: string): TextTrack;\n  /**\n   * Returns a string that specifies whether the client can play a given media resource type.\n   */\n  canPlayType(type: string): string;\n  /**\n   * Resets the audio or video object and loads a new media resource.\n   */\n  load(): void;\n  /**\n   * Clears all effects from the media pipeline.\n   */\n  msClearEffects(): void;\n  msGetAsCastingSource(): any;\n  /**\n   * Inserts the specified audio effect into media pipeline.\n   */\n  msInsertAudioEffect(\n    activatableClassId: string,\n    effectRequired: boolean,\n    config?: any\n  ): void;\n  msSetMediaKeys(mediaKeys: MSMediaKeys): void;\n  /**\n   * Specifies the media protection manager for a given media pipeline.\n   */\n  msSetMediaProtectionManager(mediaProtectionManager?: any): void;\n  /**\n   * Pauses the current playback and sets paused to TRUE. This can be used to test whether the media is\n   * playing or paused. You can also use the pause or play events to tell whether the media is playing or not.\n   */\n  pause(): void;\n  /**\n   * Loads and starts playback of a media resource.\n   */\n  play(): Promise<any>;\n  setMediaKeys(mediaKeys: MediaKeys | null): Promise<void>;\n  addEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    useCapture?: boolean\n  ): void;\n}\n"]}