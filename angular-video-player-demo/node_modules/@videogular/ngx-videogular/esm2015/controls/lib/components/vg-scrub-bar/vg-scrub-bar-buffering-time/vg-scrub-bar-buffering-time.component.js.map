{"version":3,"file":"vg-scrub-bar-buffering-time.component.js","sourceRoot":"../../../../../libs/ngx-videogular/controls/src/","sources":["lib/components/vg-scrub-bar/vg-scrub-bar-buffering-time/vg-scrub-bar-buffering-time.component.ts"],"names":[],"mappings":";;;;;AAAA,OAAO,EACL,SAAS,EACT,KAAK,EACL,UAAU,EAEV,iBAAiB,GAElB,MAAM,eAAe,CAAC;AAEvB,OAAO,EAAE,YAAY,EAAE,MAAM,iCAAiC,CAAC;AA8B/D,MAAM,OAAO,gCAAgC;;;;;IAQ3C,YAAY,GAAe,EAAS,GAAiB;QAAjB,QAAG,GAAH,GAAG,CAAc;QAFrD,kBAAa,GAAmB,EAAE,CAAC;QAGjC,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,aAAa,CAAC;IAChC,CAAC;;;;IAED,QAAQ;QACN,IAAI,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE;YAC1B,IAAI,CAAC,aAAa,EAAE,CAAC;SACtB;aAAM;YACL,IAAI,CAAC,aAAa,CAAC,IAAI,CACrB,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,SAAS;;;YAAC,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,EAAE,EAAC,CAChE,CAAC;SACH;IACH,CAAC;;;;IAED,aAAa;QACX,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClD,CAAC;;;;IAED,aAAa;;YACP,UAAU,GAAG,IAAI;QAErB,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE;YACpE,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,KAAK,CAAC,EAAE;gBAChC,UAAU,GAAG,IAAI,CAAC;aACnB;iBAAM;gBACL,UAAU;oBACR,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC;aACjE;SACF;QAED,OAAO,UAAU,CAAC;IACpB,CAAC;;;;IAED,WAAW;QACT,IAAI,CAAC,aAAa,CAAC,OAAO;;;;QAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,EAAC,CAAC;IACrD,CAAC;;;YAvEF,SAAS,SAAC;gBACT,QAAQ,EAAE,6BAA6B;gBACvC,aAAa,EAAE,iBAAiB,CAAC,IAAI;gBACrC,QAAQ,EAAE,gEAAgE;yBAExE;;;;;;;;;;;;;;;;;;;;KAoBC;aAEJ;;;;YAnCC,UAAU;YAMH,YAAY;;;oBA+BlB,KAAK;;;;IAAN,iDAAuB;;IAEvB,gDAAkB;;IAClB,kDAAY;;IAEZ,yDAAmC;;IAEN,+CAAwB","sourcesContent":["import {\n  Component,\n  Input,\n  ElementRef,\n  OnInit,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { VgApiService } from '@videogular/ngx-videogular/core';\n\n@Component({\n  selector: 'vg-scrub-bar-buffering-time',\n  encapsulation: ViewEncapsulation.None,\n  template: `<div class=\"background\" [style.width]=\"getBufferTime()\"></div>`,\n  styles: [\n    `\n      vg-scrub-bar-buffering-time {\n        display: flex;\n        width: 100%;\n        height: 5px;\n        pointer-events: none;\n        position: absolute;\n      }\n      vg-scrub-bar-buffering-time .background {\n        background-color: rgba(255, 255, 255, 0.3);\n      }\n      vg-controls vg-scrub-bar-buffering-time {\n        position: absolute;\n        top: calc(50% - 3px);\n      }\n      vg-controls vg-scrub-bar-buffering-time .background {\n        -webkit-border-radius: 2px;\n        -moz-border-radius: 2px;\n        border-radius: 2px;\n      }\n    `,\n  ],\n})\nexport class VgScrubBarBufferingTimeComponent implements OnInit, OnDestroy {\n  @Input() vgFor: string;\n\n  elem: HTMLElement;\n  target: any;\n\n  subscriptions: Subscription[] = [];\n\n  constructor(ref: ElementRef, public API: VgApiService) {\n    this.elem = ref.nativeElement;\n  }\n\n  ngOnInit() {\n    if (this.API.isPlayerReady) {\n      this.onPlayerReady();\n    } else {\n      this.subscriptions.push(\n        this.API.playerReadyEvent.subscribe(() => this.onPlayerReady())\n      );\n    }\n  }\n\n  onPlayerReady() {\n    this.target = this.API.getMediaById(this.vgFor);\n  }\n\n  getBufferTime() {\n    let bufferTime = '0%';\n\n    if (this.target && this.target.buffer && this.target.buffered.length) {\n      if (this.target.time.total === 0) {\n        bufferTime = '0%';\n      } else {\n        bufferTime =\n          (this.target.buffer.end / this.target.time.total) * 100 + '%';\n      }\n    }\n\n    return bufferTime;\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach((s) => s.unsubscribe());\n  }\n}\n"]}