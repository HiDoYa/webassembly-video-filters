{"version":3,"file":"vg-mute.component.js","sourceRoot":"../../../../../libs/ngx-videogular/controls/src/","sources":["lib/components/vg-mute/vg-mute.component.ts"],"names":[],"mappings":";;;;;AAAA,OAAO,EACL,SAAS,EACT,KAAK,EACL,UAAU,EACV,YAAY,EAEZ,iBAAiB,GAElB,MAAM,eAAe,CAAC;AAEvB,OAAO,EAAE,YAAY,EAAE,MAAM,iCAAiC,CAAC;AAuC/D,MAAM,OAAO,eAAe;;;;;IAW1B,YAAY,GAAe,EAAS,GAAiB;QAAjB,QAAG,GAAH,GAAG,CAAc;QAJrD,kBAAa,GAAmB,EAAE,CAAC;QAEnC,cAAS,GAAG,SAAS,CAAC;QAGpB,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,aAAa,CAAC;IAChC,CAAC;;;;IAED,QAAQ;QACN,IAAI,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE;YAC1B,IAAI,CAAC,aAAa,EAAE,CAAC;SACtB;aAAM;YACL,IAAI,CAAC,aAAa,CAAC,IAAI,CACrB,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,SAAS;;;YAAC,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,EAAE,EAAC,CAChE,CAAC;SACH;IACH,CAAC;;;;IAED,aAAa;QACX,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAChD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;IAC1C,CAAC;;;;IAGD,OAAO;QACL,IAAI,CAAC,eAAe,EAAE,CAAC;IACzB,CAAC;;;;;IAGD,SAAS,CAAC,KAAoB;QAC5B,oCAAoC;QACpC,IAAI,KAAK,CAAC,OAAO,KAAK,EAAE,IAAI,KAAK,CAAC,OAAO,KAAK,EAAE,EAAE;YAChD,KAAK,CAAC,cAAc,EAAE,CAAC;YACvB,IAAI,CAAC,eAAe,EAAE,CAAC;SACxB;IACH,CAAC;;;;IAED,eAAe;;cACP,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE;QAE/B,IAAI,MAAM,KAAK,CAAC,EAAE;YAChB,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,aAAa,KAAK,CAAC,EAAE;gBACxD,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;aACxB;YAED,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC;SACzC;aAAM;YACL,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC;YAC5B,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;SACxB;IACH,CAAC;;;;IAED,SAAS;;cACD,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACnD,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC;QAC9C,OAAO,MAAM,CAAC;IAChB,CAAC;;;;IAED,WAAW;QACT,IAAI,CAAC,aAAa,CAAC,OAAO;;;;QAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,EAAC,CAAC;IACrD,CAAC;;;YAxGF,SAAS,SAAC;gBACT,QAAQ,EAAE,SAAS;gBACnB,aAAa,EAAE,iBAAiB,CAAC,IAAI;gBACrC,QAAQ,EAAE;;;;;;;;;;UAUF;yBAEN;;;;;;;;;;;;;;;;;;;KAmBC;aAEJ;;;;YA7CC,UAAU;YAOH,YAAY;;;oBAwClB,KAAK;sBA6BL,YAAY,SAAC,OAAO;wBAKpB,YAAY,SAAC,SAAS,EAAE,CAAC,QAAQ,CAAC;;;;IAlCnC,gCAAuB;;IACvB,+BAAkB;;IAClB,iCAAY;;IAEZ,wCAAsB;;IAEtB,wCAAmC;;IAEnC,oCAAsB;;IAEO,8BAAwB","sourcesContent":["import {\n  Component,\n  Input,\n  ElementRef,\n  HostListener,\n  OnInit,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { VgApiService } from '@videogular/ngx-videogular/core';\n\n@Component({\n  selector: 'vg-mute',\n  encapsulation: ViewEncapsulation.None,\n  template: ` <div\n    class=\"icon\"\n    [class.vg-icon-volume_up]=\"getVolume() >= 0.75\"\n    [class.vg-icon-volume_down]=\"getVolume() >= 0.25 && getVolume() < 0.75\"\n    [class.vg-icon-volume_mute]=\"getVolume() > 0 && getVolume() < 0.25\"\n    [class.vg-icon-volume_off]=\"getVolume() === 0\"\n    tabindex=\"0\"\n    role=\"button\"\n    aria-label=\"mute button\"\n    [attr.aria-valuetext]=\"ariaValue\"\n  ></div>`,\n  styles: [\n    `\n      vg-mute {\n        -webkit-touch-callout: none;\n        -webkit-user-select: none;\n        -khtml-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n        display: flex;\n        justify-content: center;\n        height: 50px;\n        width: 50px;\n        cursor: pointer;\n        color: white;\n        line-height: 50px;\n      }\n      vg-mute .icon {\n        pointer-events: none;\n      }\n    `,\n  ],\n})\nexport class VgMuteComponent implements OnInit, OnDestroy {\n  @Input() vgFor: string;\n  elem: HTMLElement;\n  target: any;\n\n  currentVolume: number;\n\n  subscriptions: Subscription[] = [];\n\n  ariaValue = 'unmuted';\n\n  constructor(ref: ElementRef, public API: VgApiService) {\n    this.elem = ref.nativeElement;\n  }\n\n  ngOnInit() {\n    if (this.API.isPlayerReady) {\n      this.onPlayerReady();\n    } else {\n      this.subscriptions.push(\n        this.API.playerReadyEvent.subscribe(() => this.onPlayerReady())\n      );\n    }\n  }\n\n  onPlayerReady() {\n    this.target = this.API.getMediaById(this.vgFor);\n    this.currentVolume = this.target.volume;\n  }\n\n  @HostListener('click')\n  onClick() {\n    this.changeMuteState();\n  }\n\n  @HostListener('keydown', ['$event'])\n  onKeyDown(event: KeyboardEvent) {\n    // On press Enter (13) or Space (32)\n    if (event.keyCode === 13 || event.keyCode === 32) {\n      event.preventDefault();\n      this.changeMuteState();\n    }\n  }\n\n  changeMuteState() {\n    const volume = this.getVolume();\n\n    if (volume === 0) {\n      if (this.target.volume === 0 && this.currentVolume === 0) {\n        this.currentVolume = 1;\n      }\n\n      this.target.volume = this.currentVolume;\n    } else {\n      this.currentVolume = volume;\n      this.target.volume = 0;\n    }\n  }\n\n  getVolume() {\n    const volume = this.target ? this.target.volume : 0;\n    this.ariaValue = volume ? 'unmuted' : 'muted';\n    return volume;\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach((s) => s.unsubscribe());\n  }\n}\n"]}