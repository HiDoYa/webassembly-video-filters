{"version":3,"file":"vg-fullscreen.component.js","sourceRoot":"../../../../../libs/ngx-videogular/controls/src/","sources":["lib/components/vg-fullscreen/vg-fullscreen.component.ts"],"names":[],"mappings":";;;;;AAAA,OAAO,EACL,SAAS,EACT,UAAU,EACV,YAAY,EAGZ,iBAAiB,GAClB,MAAM,eAAe,CAAC;AAEvB,OAAO,EAAE,YAAY,EAAE,sBAAsB,EAAE,MAAM,iCAAiC,CAAC;AAqCvF,MAAM,OAAO,qBAAqB;;;;;;IAUhC,YACE,GAAe,EACR,GAAiB,EACjB,KAA6B;QAD7B,QAAG,GAAH,GAAG,CAAc;QACjB,UAAK,GAAL,KAAK,CAAwB;QATtC,iBAAY,GAAG,KAAK,CAAC;QAErB,kBAAa,GAAmB,EAAE,CAAC;QAEnC,cAAS,GAAG,aAAa,CAAC;QAOxB,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,aAAa,CAAC;QAC9B,IAAI,CAAC,aAAa,CAAC,IAAI,CACrB,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,SAAS,CACrC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CACnC,CACF,CAAC;IACJ,CAAC;;;;IAED,QAAQ;QACN,IAAI,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE;YAC1B,IAAI,CAAC,aAAa,EAAE,CAAC;SACtB;aAAM;YACL,IAAI,CAAC,aAAa,CAAC,IAAI,CACrB,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,SAAS;;;YAAC,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,EAAE,EAAC,CAChE,CAAC;SACH;IACH,CAAC;;;;IAED,aAAa;QACX,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClD,CAAC;;;;;IAED,kBAAkB,CAAC,OAAgB;QACjC,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,aAAa,CAAC;QAC7D,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC;IAC9B,CAAC;;;;IAGD,OAAO;QACL,IAAI,CAAC,qBAAqB,EAAE,CAAC;IAC/B,CAAC;;;;;IAGD,SAAS,CAAC,KAAoB;QAC5B,oCAAoC;QACpC,IAAI,KAAK,CAAC,OAAO,KAAK,EAAE,IAAI,KAAK,CAAC,OAAO,KAAK,EAAE,EAAE;YAChD,KAAK,CAAC,cAAc,EAAE,CAAC;YACvB,IAAI,CAAC,qBAAqB,EAAE,CAAC;SAC9B;IACH,CAAC;;;;IAED,qBAAqB;;YACf,OAAO,GAAG,IAAI,CAAC,MAAM;QAEzB,IAAI,IAAI,CAAC,MAAM,YAAY,YAAY,EAAE;YACvC,OAAO,GAAG,IAAI,CAAC;SAChB;QAED,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;IACvC,CAAC;;;;IAED,WAAW;QACT,IAAI,CAAC,aAAa,CAAC,OAAO;;;;QAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,EAAC,CAAC;IACrD,CAAC;;;YAvGF,SAAS,SAAC;gBACT,QAAQ,EAAE,eAAe;gBACzB,aAAa,EAAE,iBAAiB,CAAC,IAAI;gBACrC,QAAQ,EAAE;;;;;;;;UAQF;yBAEN;;;;;;;;;;;;;;;;;;;KAmBC;aAEJ;;;;YA3CC,UAAU;YAOH,YAAY;YAAE,sBAAsB;;;sBA+E1C,YAAY,SAAC,OAAO;wBAKpB,YAAY,SAAC,SAAS,EAAE,CAAC,QAAQ,CAAC;;;;IA9CnC,qCAAkB;;IAClB,sCAAc;;IACd,uCAAe;;IACf,6CAAqB;;IAErB,8CAAmC;;IAEnC,0CAA0B;;IAIxB,oCAAwB;;IACxB,sCAAoC","sourcesContent":["import {\n  Component,\n  ElementRef,\n  HostListener,\n  OnDestroy,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { VgApiService, VgFullscreenApiService } from '@videogular/ngx-videogular/core';\n\n@Component({\n  selector: 'vg-fullscreen',\n  encapsulation: ViewEncapsulation.None,\n  template: ` <div\n    class=\"icon\"\n    [class.vg-icon-fullscreen]=\"!isFullscreen\"\n    [class.vg-icon-fullscreen_exit]=\"isFullscreen\"\n    tabindex=\"0\"\n    role=\"button\"\n    aria-label=\"fullscreen button\"\n    [attr.aria-valuetext]=\"ariaValue\"\n  ></div>`,\n  styles: [\n    `\n      vg-fullscreen {\n        -webkit-touch-callout: none;\n        -webkit-user-select: none;\n        -khtml-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n        display: flex;\n        justify-content: center;\n        height: 50px;\n        width: 50px;\n        cursor: pointer;\n        color: white;\n        line-height: 50px;\n      }\n      vg-fullscreen .icon {\n        pointer-events: none;\n      }\n    `,\n  ],\n})\nexport class VgFullscreenComponent implements OnInit, OnDestroy {\n  elem: HTMLElement;\n  vgFor: string;\n  target: Object;\n  isFullscreen = false;\n\n  subscriptions: Subscription[] = [];\n\n  ariaValue = 'normal mode';\n\n  constructor(\n    ref: ElementRef,\n    public API: VgApiService,\n    public fsAPI: VgFullscreenApiService\n  ) {\n    this.elem = ref.nativeElement;\n    this.subscriptions.push(\n      this.fsAPI.onChangeFullscreen.subscribe(\n        this.onChangeFullscreen.bind(this)\n      )\n    );\n  }\n\n  ngOnInit() {\n    if (this.API.isPlayerReady) {\n      this.onPlayerReady();\n    } else {\n      this.subscriptions.push(\n        this.API.playerReadyEvent.subscribe(() => this.onPlayerReady())\n      );\n    }\n  }\n\n  onPlayerReady() {\n    this.target = this.API.getMediaById(this.vgFor);\n  }\n\n  onChangeFullscreen(fsState: boolean) {\n    this.ariaValue = fsState ? 'fullscreen mode' : 'normal mode';\n    this.isFullscreen = fsState;\n  }\n\n  @HostListener('click')\n  onClick() {\n    this.changeFullscreenState();\n  }\n\n  @HostListener('keydown', ['$event'])\n  onKeyDown(event: KeyboardEvent) {\n    // On press Enter (13) or Space (32)\n    if (event.keyCode === 13 || event.keyCode === 32) {\n      event.preventDefault();\n      this.changeFullscreenState();\n    }\n  }\n\n  changeFullscreenState() {\n    let element = this.target;\n\n    if (this.target instanceof VgApiService) {\n      element = null;\n    }\n\n    this.fsAPI.toggleFullscreen(element);\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach((s) => s.unsubscribe());\n  }\n}\n"]}