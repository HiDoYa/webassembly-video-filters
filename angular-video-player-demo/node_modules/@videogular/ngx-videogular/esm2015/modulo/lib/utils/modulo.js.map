{"version":3,"file":"modulo.js","sourceRoot":"../../../../../libs/ngx-videogular/modulo/src/","sources":["lib/utils/modulo.ts"],"names":[],"mappings":"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","sourcesContent":["import {FluctusInterface} from '../interfaces/fluctus.interface';\n\nconst AudioContext = window[\"AudioContext\"] || window[\"webkitAudioContext\"];\n\nexport class Gondolo implements FluctusInterface {\n  ctx: AudioContext;\n  analyser: AnalyserNode | Array<AnalyserNode>;\n  stereo: boolean;\n  audible: boolean;\n  wavedata: Uint8Array | null;\n  freqdata: any;\n  splitter: ChannelSplitterNode | null;\n  merger: ChannelMergerNode | null;\n  source: MediaElementAudioSourceNode | MediaStreamAudioSourceNode;\n  output: ChannelMergerNode;\n\n  constructor(\n    audio:\n      | HTMLAudioElement\n      | AudioNode\n      | MediaStream\n      | MediaElementAudioSourceNode\n      | MediaStreamAudioSourceNode,\n    ctx?: AudioContext | any,\n    opts?: { stereo?: boolean; audible?: boolean }\n  ) {\n    if (!(this instanceof Gondolo)) {\n      return new Gondolo(audio, ctx, opts);\n    }\n\n    if (!(ctx instanceof AudioContext)) {\n      (opts = ctx), (ctx = null);\n    }\n\n    opts = opts || {};\n    this.ctx = ctx = ctx || new AudioContext();\n\n    if (!(audio instanceof AudioNode)) {\n      audio =\n        audio instanceof Audio || audio instanceof HTMLAudioElement\n          ? ctx.createMediaElementSource(audio)\n          : ctx.createMediaStreamSource(audio);\n    }\n\n    this.audioConfigStateResolver(ctx, opts, audio);\n    this.audioConfigStateParser(ctx);\n  }\n\n  public waveform(output?: Uint8Array, channel?: number): Uint8Array {\n    if (!output) {\n      output =\n        this.wavedata ||\n        (this.wavedata = new Uint8Array(\n          (this.analyser[0] || this.analyser).frequencyBinCount\n        ));\n    }\n\n    const analyser = this.stereo ? this.analyser[channel || 0] : this.analyser;\n\n    analyser.getByteTimeDomainData(output);\n\n    return output;\n  }\n\n  public frequencies(output?: Uint8Array, channel?: number): Uint8Array {\n    if (!output) {\n      output =\n        this.freqdata ||\n        (this.freqdata = new Uint8Array(\n          (this.analyser[0] || this.analyser).frequencyBinCount\n        ));\n    }\n\n    const analyser = this.stereo ? this.analyser[channel || 0] : this.analyser;\n\n    analyser.getByteFrequencyData(output);\n\n    return output;\n  }\n\n  private audioConfigStateResolver(\n    ctx: AudioContext,\n    opts: { stereo?: boolean; audible?: boolean },\n    audio: MediaElementAudioSourceNode | any\n  ): void {\n    this.analyser = ctx.createAnalyser();\n    this.stereo = !!opts.stereo;\n    this.audible = opts.audible !== false;\n    this.wavedata = null;\n    this.freqdata = null;\n    this.splitter = null;\n    this.merger = null;\n    this.source = audio;\n  }\n\n  private audioConfigStateParser(ctx: AudioContext) {\n    if (!this.stereo) {\n      this.output = this.source;\n\n      this.source.connect(this.analyser[0] || this.analyser);\n\n      if (this.audible) {\n        (this.analyser[0] || this.analyser).connect(ctx.destination);\n      }\n    } else {\n      this.analyser = [this.analyser[0] || this.analyser];\n\n      this.analyser.push(ctx.createAnalyser());\n\n      this.splitter = ctx.createChannelSplitter(2);\n      this.merger = ctx.createChannelMerger(2);\n      this.output = this.merger;\n\n      this.source.connect(this.splitter);\n\n      for (let i = 0; i < 2; i++) {\n        this.splitter.connect(this.analyser[i], i, 0);\n        this.analyser[i].connect(this.merger, 0, i);\n      }\n\n      if (this.audible) {\n        this.merger.connect(ctx.destination);\n      }\n    }\n  }\n}\n"]}