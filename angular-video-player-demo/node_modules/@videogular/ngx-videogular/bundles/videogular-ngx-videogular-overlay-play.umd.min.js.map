{"version":3,"sources":["../overlay-play/src/lib/vg-overlay-play.component.ts","../overlay-play/src/lib/overlay-play.module.ts"],"names":["VgOverlayPlayComponent","ref","API","fsAPI","controlsHidden","this","isNativeFullscreen","areControlsHidden","subscriptions","isBuffering","elem","nativeElement","prototype","ngOnInit","_this","isPlayerReady","onPlayerReady","push","playerReadyEvent","subscribe","target","getMediaById","vgFor","onChangeFullscreen","bind","isHidden","onHideControls","bufferDetected","onUpdateBuffer","fsState","nativeFullscreen","hidden","onClick","getState","VgStates","VG_PLAYING","pause","VG_PAUSED","VG_ENDED","play","state","Array","i","l","length","ngOnDestroy","forEach","s","unsubscribe","Component","args","selector","encapsulation","ViewEncapsulation","None","template","ElementRef","VgApiService","VgFullscreenApiService","VgControlsHiddenService","Input","HostBinding","HostListener","NgModule","imports","CommonModule","VgCoreModule","declarations","exports"],"mappings":"opBAqFE,SAAAA,EACEC,EACOC,EACAC,EACCC,GAFDC,KAAAH,IAAAA,EACAG,KAAAF,MAAAA,EACCE,KAAAD,eAAAA,EAXVC,KAAAC,oBAAqB,EACrBD,KAAAE,mBAAoB,EAEpBF,KAAAG,cAAgC,GAEGH,KAAAI,aAAc,EAQ/CJ,KAAKK,KAAOT,EAAIU,qBAGlBX,EAAAY,UAAAC,SAAA,WAAA,IAAAC,EAAAT,KACMA,KAAKH,IAAIa,cACXV,KAAKW,gBAELX,KAAKG,cAAcS,KACjBZ,KAAKH,IAAIgB,iBAAiBC,WAAS,WAAO,OAAAL,EAAKE,qBAKrDhB,EAAAY,UAAAI,cAAA,WAAA,IAAAF,EAAAT,KACEA,KAAKe,OAASf,KAAKH,IAAImB,aAAahB,KAAKiB,OACzCjB,KAAKG,cAAcS,KACjBZ,KAAKF,MAAMoB,mBAAmBJ,UAC5Bd,KAAKkB,mBAAmBC,KAAKnB,QAGjCA,KAAKG,cAAcS,KACjBZ,KAAKD,eAAeqB,SAASN,UAAUd,KAAKqB,eAAeF,KAAKnB,QAElEA,KAAKG,cAAcS,KACjBZ,KAAKe,OAAOZ,cAAcmB,eAAeR,WAAS,SAAEV,GAClD,OAAAK,EAAKc,eAAenB,QAK1BT,EAAAY,UAAAgB,eAAA,SAAenB,GACbJ,KAAKI,YAAcA,GAGrBT,EAAAY,UAAAW,mBAAA,SAAmBM,GACbxB,KAAKF,MAAM2B,mBACbzB,KAAKC,mBAAqBuB,IAI9B7B,EAAAY,UAAAc,eAAA,SAAeK,GACb1B,KAAKE,kBAAoBwB,GAI3B/B,EAAAY,UAAAoB,QAAA,WAGE,OAFc3B,KAAK4B,YAGjB,KAAKC,EAAAA,SAASC,WACZ9B,KAAKe,OAAOgB,QACZ,MAEF,KAAKF,EAAAA,SAASG,UACd,KAAKH,EAAAA,SAASI,SACZjC,KAAKe,OAAOmB,SAKlBvC,EAAAY,UAAAqB,SAAA,eACMO,EAAQN,EAAAA,SAASG,UAErB,GAAIhC,KAAKe,OACP,GAAIf,KAAKe,OAAOoB,iBAAiBC,OAC/B,IAAK,IAAIC,EAAI,EAAGC,EAAItC,KAAKe,OAAOoB,MAAMI,OAAQF,EAAIC,EAAGD,IACnD,GAAIrC,KAAKe,OAAOoB,MAAME,KAAOR,EAAAA,SAASC,WAAY,CAChDK,EAAQN,EAAAA,SAASC,WACjB,YAIJK,EAAQnC,KAAKe,OAAOoB,MAIxB,OAAOA,GAGTxC,EAAAY,UAAAiC,YAAA,WACExC,KAAKG,cAAcsC,SAAO,SAAEC,GAAM,OAAAA,EAAEC,2CA9JvCC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,kBACVC,cAAeC,EAAAA,kBAAkBC,KACjCC,SAAU,4RAWR,yrCAvBFC,EAAAA,kBAOOC,EAAAA,oBAAcC,EAAAA,8BAAwBC,EAAAA,0DA+D5CC,EAAAA,2BASAC,EAAAA,YAAWX,KAAA,CAAC,uCAoDZY,EAAAA,aAAYZ,KAAA,CAAC,kBC7HhB,iCALCa,EAAAA,SAAQb,KAAA,CAAC,CACRc,QAAS,CAACC,EAAAA,aAAcC,EAAAA,cACxBC,aAAc,CAACnE,GACfoE,QAAS,CAACpE","sourcesContent":["import {\n  Component,\n  OnInit,\n  Input,\n  ElementRef,\n  HostListener,\n  ViewEncapsulation,\n  OnDestroy,\n  HostBinding,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { VgApiService, VgFullscreenApiService, VgControlsHiddenService, VgStates } from '@videogular/ngx-videogular/core';\n\n@Component({\n  selector: 'vg-overlay-play',\n  encapsulation: ViewEncapsulation.None,\n  template: `<div\n    class=\"vg-overlay-play\"\n    [class.native-fullscreen]=\"isNativeFullscreen\"\n    [class.controls-hidden]=\"areControlsHidden\"\n  >\n    <div\n      class=\"overlay-play-container\"\n      [class.vg-icon-play_arrow]=\"getState() !== 'playing'\"\n    ></div>\n  </div>`,\n  styles: [\n    `\n      vg-overlay-play {\n        z-index: 200;\n      }\n      vg-overlay-play.is-buffering {\n        display: none;\n      }\n      vg-overlay-play .vg-overlay-play {\n        transition: all 0.5s;\n        cursor: pointer;\n        position: absolute;\n        display: block;\n        color: white;\n        width: 100%;\n        height: 100%;\n        font-size: 80px;\n        filter: alpha(opacity=60);\n        opacity: 0.6;\n      }\n      vg-overlay-play .vg-overlay-play.native-fullscreen.controls-hidden {\n        cursor: none;\n      }\n      vg-overlay-play\n        .vg-overlay-play\n        .overlay-play-container.vg-icon-play_arrow {\n        pointer-events: none;\n        width: 100%;\n        height: 100%;\n        position: absolute;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        font-size: 80px;\n      }\n      vg-overlay-play .vg-overlay-play:hover {\n        filter: alpha(opacity=100);\n        opacity: 1;\n      }\n      vg-overlay-play\n        .vg-overlay-play:hover\n        .overlay-play-container.vg-icon-play_arrow:before {\n        transform: scale(1.2);\n      }\n    `,\n  ],\n})\nexport class VgOverlayPlayComponent implements OnInit, OnDestroy {\n  @Input() vgFor: string;\n  elem: HTMLElement;\n  target: any;\n\n  isNativeFullscreen = false;\n  areControlsHidden = false;\n\n  subscriptions: Subscription[] = [];\n\n  @HostBinding('class.is-buffering') isBuffering = false;\n\n  constructor(\n    ref: ElementRef,\n    public API: VgApiService,\n    public fsAPI: VgFullscreenApiService,\n    private controlsHidden: VgControlsHiddenService\n  ) {\n    this.elem = ref.nativeElement;\n  }\n\n  ngOnInit() {\n    if (this.API.isPlayerReady) {\n      this.onPlayerReady();\n    } else {\n      this.subscriptions.push(\n        this.API.playerReadyEvent.subscribe(() => this.onPlayerReady())\n      );\n    }\n  }\n\n  onPlayerReady() {\n    this.target = this.API.getMediaById(this.vgFor);\n    this.subscriptions.push(\n      this.fsAPI.onChangeFullscreen.subscribe(\n        this.onChangeFullscreen.bind(this)\n      )\n    );\n    this.subscriptions.push(\n      this.controlsHidden.isHidden.subscribe(this.onHideControls.bind(this))\n    );\n    this.subscriptions.push(\n      this.target.subscriptions.bufferDetected.subscribe((isBuffering) =>\n        this.onUpdateBuffer(isBuffering)\n      )\n    );\n  }\n\n  onUpdateBuffer(isBuffering) {\n    this.isBuffering = isBuffering;\n  }\n\n  onChangeFullscreen(fsState: boolean) {\n    if (this.fsAPI.nativeFullscreen) {\n      this.isNativeFullscreen = fsState;\n    }\n  }\n\n  onHideControls(hidden: boolean) {\n    this.areControlsHidden = hidden;\n  }\n\n  @HostListener('click')\n  onClick() {\n    const state = this.getState();\n\n    switch (state) {\n      case VgStates.VG_PLAYING:\n        this.target.pause();\n        break;\n\n      case VgStates.VG_PAUSED:\n      case VgStates.VG_ENDED:\n        this.target.play();\n        break;\n    }\n  }\n\n  getState() {\n    let state = VgStates.VG_PAUSED;\n\n    if (this.target) {\n      if (this.target.state instanceof Array) {\n        for (let i = 0, l = this.target.state.length; i < l; i++) {\n          if (this.target.state[i] === VgStates.VG_PLAYING) {\n            state = VgStates.VG_PLAYING;\n            break;\n          }\n        }\n      } else {\n        state = this.target.state;\n      }\n    }\n\n    return state;\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach((s) => s.unsubscribe());\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { VgOverlayPlayComponent } from './vg-overlay-play.component';\nimport { VgCoreModule } from '@videogular/ngx-videogular/core';\n\n@NgModule({\n  imports: [CommonModule, VgCoreModule],\n  declarations: [VgOverlayPlayComponent],\n  exports: [VgOverlayPlayComponent],\n})\nexport class VgOverlayPlayModule {}\n"]}