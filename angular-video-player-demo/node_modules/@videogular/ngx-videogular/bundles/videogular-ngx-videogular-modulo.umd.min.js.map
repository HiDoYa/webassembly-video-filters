{"version":3,"sources":["../../libs/ngx-videogular/modulo/src/lib/utils/modulo.ts","../../libs/ngx-videogular/modulo/src/lib/components/vg-modulo.component.ts","../modulo/src/lib/modulo.module.ts"],"names":["AudioContext","window","Gondolo","audio","ctx","opts","this","AudioNode","Audio","HTMLAudioElement","createMediaElementSource","createMediaStreamSource","audioConfigStateResolver","audioConfigStateParser","prototype","waveform","output","channel","wavedata","Uint8Array","analyser","frequencyBinCount","stereo","getByteTimeDomainData","frequencies","freqdata","getByteFrequencyData","createAnalyser","audible","splitter","merger","source","push","createChannelSplitter","createChannelMerger","connect","i","destination","VgModuloComponent","startVisualizer","_audioAnalyser","audioElement","_a","moduloConfig","dimensions","width","height","canvasElement","waveCanvas","nativeElement","_ctx","getContext","update","_this","audioFreq","fillStyle","strokeStyle","lineWidth","scaleFactor","_b","fillRect","beginPath","moveTo","length","lineTo","stroke","requestAnimationFrame","Component","args","selector","template","Input","ViewChild","static","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import {FluctusInterface} from '../interfaces/fluctus.interface';\n\nconst AudioContext = window[\"AudioContext\"] || window[\"webkitAudioContext\"];\n\nexport class Gondolo implements FluctusInterface {\n  ctx: AudioContext;\n  analyser: AnalyserNode | Array<AnalyserNode>;\n  stereo: boolean;\n  audible: boolean;\n  wavedata: Uint8Array | null;\n  freqdata: any;\n  splitter: ChannelSplitterNode | null;\n  merger: ChannelMergerNode | null;\n  source: MediaElementAudioSourceNode | MediaStreamAudioSourceNode;\n  output: ChannelMergerNode;\n\n  constructor(\n    audio:\n      | HTMLAudioElement\n      | AudioNode\n      | MediaStream\n      | MediaElementAudioSourceNode\n      | MediaStreamAudioSourceNode,\n    ctx?: AudioContext | any,\n    opts?: { stereo?: boolean; audible?: boolean }\n  ) {\n    if (!(this instanceof Gondolo)) {\n      return new Gondolo(audio, ctx, opts);\n    }\n\n    if (!(ctx instanceof AudioContext)) {\n      (opts = ctx), (ctx = null);\n    }\n\n    opts = opts || {};\n    this.ctx = ctx = ctx || new AudioContext();\n\n    if (!(audio instanceof AudioNode)) {\n      audio =\n        audio instanceof Audio || audio instanceof HTMLAudioElement\n          ? ctx.createMediaElementSource(audio)\n          : ctx.createMediaStreamSource(audio);\n    }\n\n    this.audioConfigStateResolver(ctx, opts, audio);\n    this.audioConfigStateParser(ctx);\n  }\n\n  public waveform(output?: Uint8Array, channel?: number): Uint8Array {\n    if (!output) {\n      output =\n        this.wavedata ||\n        (this.wavedata = new Uint8Array(\n          (this.analyser[0] || this.analyser).frequencyBinCount\n        ));\n    }\n\n    const analyser = this.stereo ? this.analyser[channel || 0] : this.analyser;\n\n    analyser.getByteTimeDomainData(output);\n\n    return output;\n  }\n\n  public frequencies(output?: Uint8Array, channel?: number): Uint8Array {\n    if (!output) {\n      output =\n        this.freqdata ||\n        (this.freqdata = new Uint8Array(\n          (this.analyser[0] || this.analyser).frequencyBinCount\n        ));\n    }\n\n    const analyser = this.stereo ? this.analyser[channel || 0] : this.analyser;\n\n    analyser.getByteFrequencyData(output);\n\n    return output;\n  }\n\n  private audioConfigStateResolver(\n    ctx: AudioContext,\n    opts: { stereo?: boolean; audible?: boolean },\n    audio: MediaElementAudioSourceNode | any\n  ): void {\n    this.analyser = ctx.createAnalyser();\n    this.stereo = !!opts.stereo;\n    this.audible = opts.audible !== false;\n    this.wavedata = null;\n    this.freqdata = null;\n    this.splitter = null;\n    this.merger = null;\n    this.source = audio;\n  }\n\n  private audioConfigStateParser(ctx: AudioContext) {\n    if (!this.stereo) {\n      this.output = this.source;\n\n      this.source.connect(this.analyser[0] || this.analyser);\n\n      if (this.audible) {\n        (this.analyser[0] || this.analyser).connect(ctx.destination);\n      }\n    } else {\n      this.analyser = [this.analyser[0] || this.analyser];\n\n      this.analyser.push(ctx.createAnalyser());\n\n      this.splitter = ctx.createChannelSplitter(2);\n      this.merger = ctx.createChannelMerger(2);\n      this.output = this.merger;\n\n      this.source.connect(this.splitter);\n\n      for (let i = 0; i < 2; i++) {\n        this.splitter.connect(this.analyser[i], i, 0);\n        this.analyser[i].connect(this.merger, 0, i);\n      }\n\n      if (this.audible) {\n        this.merger.connect(ctx.destination);\n      }\n    }\n  }\n}\n","import { Component, ElementRef, Input, ViewChild } from \"@angular/core\";\nimport { ModuloConfig } from '../interfaces/modulo-config.interface';\nimport { Gondolo } from \"../utils/modulo\";\n\n@Component({\n  selector: \"vg-modulo\",\n  templateUrl: \"./vg-modulo.component.html\",\n})\nexport class VgModuloComponent {\n  private _audioAnalyser: Gondolo;\n  private _ctx: CanvasRenderingContext2D;\n\n  @Input() moduloConfig: ModuloConfig;\n  @Input() audioElement: HTMLAudioElement;\n\n  @ViewChild(\"waveCanvas\", { static: false }) waveCanvas: ElementRef<HTMLCanvasElement>;\n\n  public startVisualizer() {\n    if (!this._audioAnalyser) {\n      this._audioAnalyser = new Gondolo(this.audioElement);\n\n      const {width, height} = this.moduloConfig.dimensions;\n      const canvasElement = this.waveCanvas.nativeElement;\n\n      this._ctx = canvasElement.getContext(\"2d\");\n\n      canvasElement.width = width;\n      canvasElement.height = height;\n    }\n\n    this.update();\n  }\n\n  public update() {\n    const audioFreq = this._audioAnalyser.waveform();\n    const {fillStyle, strokeStyle, lineWidth, scaleFactor} = this.moduloConfig;\n    const {width, height} = this.waveCanvas.nativeElement;\n\n    // Clear canvas\n    this._ctx.fillStyle = fillStyle;\n    this._ctx.fillRect(0, 0, width, height);\n\n    this._ctx.strokeStyle = strokeStyle;\n    this._ctx.lineWidth = lineWidth;\n\n    // Draw frequency lines\n    this._ctx.beginPath();\n    this._ctx.moveTo(0, height / 2 - audioFreq[0] * scaleFactor);\n\n    for (let i = 0; i < audioFreq.length; i++) {\n      this._ctx.lineTo(\n        (width / audioFreq.length) * i,\n        height / 2 - audioFreq[i] * scaleFactor\n      );\n    }\n\n    this._ctx.moveTo(0, height / 2 + audioFreq[0] * scaleFactor);\n\n    for (let i = 0; i < audioFreq.length; i++) {\n      this._ctx.lineTo(\n        (width / audioFreq.length) * i,\n        height / 2 + audioFreq[i] * scaleFactor\n      );\n    }\n\n    this._ctx.stroke();\n\n    window.requestAnimationFrame(() => this.update());\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { VgModuloComponent } from \"./components/vg-modulo.component\";\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [VgModuloComponent],\n  exports: [VgModuloComponent],\n})\nexport class VgModuloModule {}\n"]}